[x] Type Check for all values
[x] README.md

[ ] JSDoc for all important interfaces
[ ] JSDoc for all functions in main.ts

[ ] Unit Tests:
    [ ] getBoard - not needed ?!
    [ ] initGame - 2, 3, 4 players -> check standard constellation
    [ ] advanceGame
        [ ] invalid move - wrong pawn, wrong position
        [ ] move that shrinks the field
        [ ] move that shrinks the field to its minimum
        [ ] normal move
        [ ] beating move - normal, shrinking
    [ ] letComputerAdvanceGame - 3 end game situations
    [ ] getPossibleMoves - wrong pawn, knight, bishop, rook, queen
    [ ] getIndexOfPawnOnField - no pawn, correct pawn
    [ ] isGameOver - yes, no, one move -> before no, after yes

[ ] Computer opponent:
    [ ] MiniMax implementation
        [x] recursive function, evalFunction
        [x] random choice when there are several best moves (same score)
        [ ] pruning - even possible ?
        [x] depth gets higher as the game nears its end
    [ ] AI implementation - neural net? reinforced learning?